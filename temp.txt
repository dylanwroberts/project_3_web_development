  let date_condition = '';
  let params = [];

  //check for what the user provided and create the query based on it
  if (req.query.start_date && req.query.end_date) {
    params.push(req.query.start_date);
    params.push(req.query.end_date);
    date_condition = 'WHERE date_time BETWEEN (?) AND (?)';
  } else if (req.query.start_date) {
    params.push(req.query.start_date);
    date_condition = 'WHERE date_time >= (?)';
  } else if (req.query.end_date) {
    params.push(req.query.end_date);
    date_condition = 'WHERE date_time <= (?)';
  }

  let queries = [];
  if (req.query.code) {
    queries.push(sqlHelper.createConditionals('code', req.query.code));
  }

  if(req.query.grid) {
    queries.push(sqlHelper.createConditionals('grid', req.query.grid));
  }

  if(req.query.id) {
    queries.push(sqlHelper.createConditionals('id', req.query.id));
  }

  //push limit onto the parameter array - 10K default and fence
  params.push(req.query.limit < 10000 ? req.query.limit : 10000);

  let query = `SELECT * FROM Incidents ${date_condition} ORDER BY date_time DESC LIMIT (?)`;

  db.all(query, params, (err, data) => {
    if (err) {
      console.log(err);
    } else {
      let result = {};

      for (row in data) {
        let current = data[row];
        result[`I${current.case_number}`] = {
          date: current.date_time.split('T')[0],
          time: current.date_time.split('T')[1],
          code: current.code,
          incident: current.incident,
          police_grid: current.police_grid,
          neighborhood_number: current.neighborhood_number,
          block: current.block
        };
      }

      res.send(result);
    }
  });